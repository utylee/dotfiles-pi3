##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration
#
# Generally, you will want to move this file somewhere, and start with a clean
# file but keep this around for reference. Or just disable in sites-enabled.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
	upstream danawow {
		server unix:/tmp/wowinfo_1.sock fail_timeout=0;
		server unix:/tmp/wowinfo_2.sock fail_timeout=0;
		server unix:/tmp/wowinfo_3.sock fail_timeout=0;
		server unix:/tmp/wowinfo_4.sock fail_timeout=0;
		server unix:/tmp/wowinfo_5.sock fail_timeout=0;
		server unix:/tmp/wowinfo_6.sock fail_timeout=0;
		server unix:/tmp/wowinfo_7.sock fail_timeout=0;
		server unix:/tmp/wowinfo_8.sock fail_timeout=0;

		# nginx proxy <---> backend 간에도 핸드셰이크가 계속 생성 후 끊기는 부하를 줄이는 방법이라고 어떤
		# 한국인이 그랬습니다
		keepalive 100;
		#server 127.0.0.1:8081 fail_timeout=0;
		#server 127.0.0.1:8082 fail_timeout=0;
		#server 127.0.0.1:8083 fail_timeout=0;
		#server 127.0.0.1:8084 fail_timeout=0;
	}

# cache  control 을 해준다고 합니다.
# pingdom에서의 웹페이지 테스트에서 권장해줬습니다. expires headers  nginx 을 검색하다보니
# 참고:https://www.digitalocean.com/community/tutorials/how-to-implement-browser-caching-with-nginx-s-header-module-on-ubuntu-16-04
# html을 항상 받고, css, js, 이미지는 최대로 캐싱하라는 것 같습니다
# Expires map
map $sent_http_content_type $expires {
    default                    off;
    text/html                  epoch;
    text/css                   30d;
    application/javascript     30d;
    ~image/                    30d;
}
 
server {
	#listen 80 default_server;
	#listen [::]:80 default_server;

	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	#root /var/www/html;

	# Add index.php to the list if you are using PHP
	#index index.html index.htm index.nginx-debian.html;

	server_name www.danawow.com;

	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		#try_files $uri $uri/ =404;
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "upgrade";
		proxy_set_header Host $http_host;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_redirect off;
		proxy_buffering off;
		# websocket을 끊는 제한이 기본으로 60이라고 합니다. 넉넉하게 30분으로 늘려줬습니다
		proxy_read_timeout 1800;
		proxy_pass http://danawow;

	}
	location /static {
		# path for static files
		# root 를 사용하려면 마지막 static 을 빼주지 않으면 중첩됩니다
		alias /home/odroid/.virtualenvs/blog/src/aiohttp/wowinfo/static;
		#root /home/pi/.virtualenvs/blog/src/aiohttp/wowinfo/;
	}
 
	# expires header , 브라우징 캐싱을 caching 위의 정의한 규칙대로 행하라는 명령
	expires $expires;

	# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
	#
	#location ~ \.php$ {
	#	include snippets/fastcgi-php.conf;
	#
	#	# With php7.0-cgi alone:
	#	fastcgi_pass 127.0.0.1:9000;
	#	# With php7.0-fpm:
	#	fastcgi_pass unix:/run/php/php7.0-fpm.sock;
	#}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}

    listen 443 ssl http2; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/www.danawow.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/www.danawow.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

	#ssl_ecdh_curve secp384r1; # see here and here (pg. 485)
	#ssl_buffer_size 4k;
	#압축설정도 별 영향이 없네요
	#gzip on;
	#gzip_types application/javascript image/* text/css;
	#gunzip on;
	#이미 적용되어 있나봅니다. 속도차이가 없음
	#ssl_session_cache shared:SSL:1m; # holds approx 4000 sessions
	#ssl_session_timeout 1h; # 1 hour during which sessions can be re-used.

}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}

 
server {
    if ($host = www.danawow.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


	server_name www.danawow.com;
    return 404; # managed by Certbot
}
